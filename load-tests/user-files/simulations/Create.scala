import scala.concurrent.duration._

import io.gatling.core.Predef._
import io.gatling.http.Predef._
import io.gatling.jdbc.Predef._

class Create extends Simulation {

	val httpProtocol = http
		.baseUrl("https://ntbs-load-test.e32846b1ddf0432eb63f.northeurope.aksapp.io")
		.inferHtmlResources(WhiteList("""https://ntbs-load-test.e32846b1ddf0432eb63f.northeurope.aksapp.io/.*"""), BlackList())

	val get_headers = Map(
		"accept" -> "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
		"accept-encoding" -> "gzip, deflate, br",
		"accept-language" -> "en-US,en;q=0.9",
		"sec-ch-ua" -> """ Not A;Brand";v="99", "Chromium";v="90", "Google Chrome";v="90""",
		"sec-ch-ua-mobile" -> "?0",
		"sec-fetch-dest" -> "document",
		"sec-fetch-mode" -> "navigate",
		"sec-fetch-site" -> "same-origin",
		"sec-fetch-user" -> "?1",
		"upgrade-insecure-requests" -> "1",
		"user-agent" -> "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36")

	val validate_headers = Map(
		"accept" -> "application/json, text/plain, */*",
		"accept-encoding" -> "gzip, deflate, br",
		"accept-language" -> "en-US,en;q=0.9",
		"content-type" -> "application/json;charset=UTF-8",
		"origin" -> "https://ntbs-load-test.e32846b1ddf0432eb63f.northeurope.aksapp.io",
		"requestverificationtoken" -> "${requestVerificationToken}",
		"sec-ch-ua" -> """ Not A;Brand";v="99", "Chromium";v="90", "Google Chrome";v="90""",
		"sec-ch-ua-mobile" -> "?0",
		"sec-fetch-dest" -> "empty",
		"sec-fetch-mode" -> "cors",
		"sec-fetch-site" -> "same-origin",
		"user-agent" -> "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36")

	val save_headers = Map(
		"accept" -> "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9",
		"accept-encoding" -> "gzip, deflate, br",
		"accept-language" -> "en-US,en;q=0.9",
		"origin" -> "https://ntbs-load-test.e32846b1ddf0432eb63f.northeurope.aksapp.io",
		"sec-ch-ua" -> """ Not A;Brand";v="99", "Chromium";v="90", "Google Chrome";v="90""",
		"sec-ch-ua-mobile" -> "?0",
		"sec-fetch-dest" -> "document",
		"sec-fetch-mode" -> "navigate",
		"sec-fetch-site" -> "same-origin",
		"sec-fetch-user" -> "?1",
		"upgrade-insecure-requests" -> "1",
		"user-agent" -> "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.93 Safari/537.36")

	val search = exec(http("request_0")
			.get("/Search")
			.headers(get_headers)
			.check(status.is(200)))
		.pause(2)
		.exec(http("request_5")
			.get("/Search?SearchParameters.IdFilter=&SearchParameters.FamilyName=Test&SearchParameters.PartialDob.Day=&SearchParameters.PartialDob.Month=&SearchParameters.PartialDob.Year=&SearchParameters.Postcode=&SearchParameters.PartialNotificationDate.Day=&SearchParameters.PartialNotificationDate.Month=&SearchParameters.PartialNotificationDate.Year=&SearchParameters.GivenName=&SearchParameters.SexId=&SearchParameters.TBServiceCode=&SearchParameters.CountryId=")
			.headers(get_headers)
			.check(status.is(200)))
		.pause(2)

	val createNotificationWithPatientDetails = exec(http("request_10")
			.get("/Notifications/Create")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				currentLocationRegex("https://ntbs-load-test.e32846b1ddf0432eb63f.northeurope.aksapp.io/Notifications/(.*)/Edit/PatientDetails").saveAs("notificationId"),
				status.is(200)))
		.pause(2)
		.exec(http("request_15")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"9111222333","shouldValidateFull":false,"key":"NhsNumber","NhsNumber":"9111222333"}"""))
			.check(status.is(200))
			.resources(http("request_16")
				.post("/Notifications/${notificationId}/Edit/PatientDetails/NhsNumberDuplicates")
				.headers(validate_headers)
				.body(StringBody("""{"notificationId":"${notificationId}","nhsNumber":"9111222333"}"""))
				.check(status.is(200))))
		.pause(1)
		.exec(http("request_17")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"Test","shouldValidateFull":false,"key":"GivenName","GivenName":"Test"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_18")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"Testerson","shouldValidateFull":false,"key":"FamilyName","FamilyName":"Testerson"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_19")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsDate")
			.headers(validate_headers)
			.body(StringBody("""{"day":"01","month":"02","year":"1933","key":"Dob"}"""))
			.check(status.is(200))
			.resources(http("request_20")
				.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsProperty")
				.headers(validate_headers)
				.body(StringBody("""{"value":"1","shouldValidateFull":false,"key":"SexId","SexId":"1"}"""))
				.check(status.is(200))))
		.pause(1)
		.exec(http("request_21")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"1","shouldValidateFull":false,"key":"EthnicityId","EthnicityId":"1"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_22")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"235","shouldValidateFull":false,"key":"CountryId","CountryId":"235"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_23")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"123 Fake Street","shouldValidateFull":false,"key":"Address","Address":"123 Fake Street"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_25")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePostcode")
			.headers(validate_headers)
			.body(StringBody("""{"shouldValidateFull":false,"postcode":"BS1 1PN"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_26")
			.post("/Notifications/${notificationId}/Edit/PatientDetails/ValidatePatientDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"5","shouldValidateFull":false,"key":"OccupationId","OccupationId":"5"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_27")
			.post("/Notifications/${notificationId}/Edit/PatientDetails")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("PatientDetails.NhsNumberNotKnown", "false")
			.formParam("PatientDetails.NhsNumber", "9111222333")
			.formParam("PatientDetails.GivenName", "Test")
			.formParam("PatientDetails.FamilyName", "Testerson")
			.formParam("FormattedDob.Day", "01")
			.formParam("FormattedDob.Month", "02")
			.formParam("FormattedDob.Year", "1933")
			.formParam("PatientDetails.SexId", "1")
			.formParam("PatientDetails.EthnicityId", "1")
			.formParam("PatientDetails.LocalPatientId", "")
			.formParam("PatientDetails.CountryId", "235")
			.formParam("PatientDetails.YearOfUkEntry", "")
			.formParam("PatientDetails.Address", "123 Fake Street")
			.formParam("PatientDetails.NoFixedAbode", "false")
			.formParam("PatientDetails.Postcode", "BS1 1PN")
			.formParam("PatientDetails.OccupationId", "5")
			.formParam("PatientDetails.OccupationOther", "")
			.formParam("actionName", "Save")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}")
			.check(status.is(200)))
		.pause(2)

	val editHospitalDetails = exec(http("edit_hospital_details_page")
			.get("/Notifications/${notificationId}/Edit/HospitalDetails")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200))
			.resources(http("get_hospitals")
				.get("/Notifications/${notificationId}/Edit/HospitalDetails/GetFilteredListsByTbService?value=TBS0357")
				.headers(get_headers)
				.check(status.is(200))))
		.pause(2)
		.exec(http("request_33")
			.post("/Notifications/${notificationId}/Edit/HospitalDetails/ValidateNotificationDate")
			.headers(validate_headers)
			.body(StringBody("""{"day":"05","month":"05","year":"2021","key":"NotificationDate","notificationId":"${notificationId}"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_34")
			.post("/Notifications/${notificationId}/Edit/HospitalDetails/ValidateHospitalDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"TBS0028","shouldValidateFull":false,"key":"TBServiceCode","TBServiceCode":"TBS0028"}"""))
			.check(status.is(200))
			.resources(http("request_35")
				.get("/Notifications/${notificationId}/Edit/HospitalDetails/GetFilteredListsByTbService?value=TBS0028")
				.headers(get_headers)
				.check(status.is(200))))
		.pause(1)
		.exec(http("request_36")
			.post("/Notifications/${notificationId}/Edit/HospitalDetails/ValidateHospitalDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"bcfc88e8-ead4-4e40-9d7e-be7896adbd4a","shouldValidateFull":false,"key":"HospitalId","HospitalId":"bcfc88e8-ead4-4e40-9d7e-be7896adbd4a"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_37")
			.post("/Notifications/${notificationId}/Edit/HospitalDetails/ValidateHospitalDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":null,"shouldValidateFull":false,"key":"Consultant","Consultant":""}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_38")
			.post("/Notifications/${notificationId}/Edit/HospitalDetails/ValidateHospitalDetailsProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"1158","shouldValidateFull":false,"key":"CaseManagerId","CaseManagerId":"1158"}"""))
			.check(status.is(200)))
		.pause(1)
		.exec(http("request_39")
			.post("/Notifications/${notificationId}/Edit/HospitalDetails?isBeingSubmitted=False")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("FormattedNotificationDate.Day", "05")
			.formParam("FormattedNotificationDate.Month", "05")
			.formParam("FormattedNotificationDate.Year", "2021")
			.formParam("HospitalDetails.TBServiceCode", "TBS0028")
			.formParam("HospitalDetails.HospitalId", "bcfc88e8-ead4-4e40-9d7e-be7896adbd4a")
			.formParam("HospitalDetails.Consultant", "")
			.formParam("HospitalDetails.CaseManagerId", "1158")
			.formParam("actionName", "Save")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}")
			.check(status.is(200)))
		.pause(2)

	val editClinicalDetails = exec(http("edit_clinical_details_page")
			.get("/Notifications/${notificationId}/Edit/ClinicalDetails")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(2)
		.exec(http("request_44")
			.get("/Notifications/${notificationId}/Edit/ClinicalDetails/ValidateNotificationSites?valueList%5B0%5D=PULMONARY&shouldValidateFull=False")
			.headers(validate_headers))
		.pause(1)
		.exec(http("request_45")
			.get("/Notifications/${notificationId}/Edit/ClinicalDetails/ValidateNotificationSites?valueList%5B0%5D=PULMONARY&valueList%5B1%5D=BONE_SPINE&shouldValidateFull=False")
			.headers(validate_headers))
		.pause(1)
		.exec(http("request_46")
			.post("/Notifications/${notificationId}/Edit/ClinicalDetails/ValidateClinicalDetailsYearComparison")
			.headers(validate_headers)
			.body(StringBody("""{"newYear":"2001","shouldValidateFull":"False","existingYear":"1933","propertyName":"BCG vaccination year"}""")))
		.pause(1)
		.exec(http("request_47")
			.post("/Notifications/${notificationId}/Edit/ClinicalDetails/ValidateClinicalDetailsDate")
			.headers(validate_headers)
			.body(StringBody("""{"day":"01","month":"05","year":"2021","key":"FirstPresentationDate"}""")))
		.pause(1)
		.exec(http("request_48")
			.post("/Notifications/${notificationId}/Edit/ClinicalDetails/ValidateClinicalDetailsDate")
			.headers(validate_headers)
			.body(StringBody("""{"day":"02","month":"05","year":"2021","key":"TBServicePresentationDate"}""")))
		.pause(1)
		.exec(http("request_49")
			.post("/Notifications/${notificationId}/Edit/ClinicalDetails/ValidateClinicalDetailsDate")
			.headers(validate_headers)
			.body(StringBody("""{"day":"05","month":"05","year":"2021","key":"DiagnosisDate"}""")))
		.pause(1)
		.exec(http("request_51")
			.post("/Notifications/${notificationId}/Edit/ClinicalDetails?isBeingSubmitted=False")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("PatientBirthYear", "1933")
			.formParam("NotificationSiteMap[PULMONARY]", "true")
			.formParam("NotificationSiteMap[PULMONARY]", "false")
			.formParam("NotificationSiteMap[LARYNGEAL]", "false")
			.formParam("NotificationSiteMap[MILIARY]", "false")
			.formParam("NotificationSiteMap[BONE_SPINE]", "true")
			.formParam("NotificationSiteMap[BONE_SPINE]", "false")
			.formParam("NotificationSiteMap[BONE_OTHER]", "false")
			.formParam("NotificationSiteMap[CNS_MENINGITIS]", "false")
			.formParam("NotificationSiteMap[CNS_OTHER]", "false")
			.formParam("NotificationSiteMap[LYMPH_INTRA]", "false")
			.formParam("NotificationSiteMap[LYMPH_EXTRA]", "false")
			.formParam("NotificationSiteMap[CRYPTIC]", "false")
			.formParam("NotificationSiteMap[GASTROINTESTINAL]", "false")
			.formParam("NotificationSiteMap[GENITOURINARY]", "false")
			.formParam("NotificationSiteMap[OCULAR]", "false")
			.formParam("NotificationSiteMap[PLEURAL]", "false")
			.formParam("NotificationSiteMap[PERICARDIAL]", "false")
			.formParam("NotificationSiteMap[SKIN]", "false")
			.formParam("NotificationSiteMap[OTHER]", "false")
			.formParam("OtherSite.SiteId", "17")
			.formParam("OtherSite.SiteDescription", "")
			.formParam("ClinicalDetails.BCGVaccinationState", "Yes")
			.formParam("ClinicalDetails.BCGVaccinationYear", "2001")
			.formParam("ClinicalDetails.HIVTestState", "0")
			.formParam("FormattedSymptomDate.Day", "")
			.formParam("FormattedSymptomDate.Month", "")
			.formParam("FormattedSymptomDate.Year", "")
			.formParam("ClinicalDetails.IsSymptomatic", "false")
			.formParam("FormattedFirstPresentationDate.Day", "01")
			.formParam("FormattedFirstPresentationDate.Month", "05")
			.formParam("FormattedFirstPresentationDate.Year", "2021")
			.formParam("ClinicalDetails.HealthcareSetting", "ContactTracing")
			.formParam("ClinicalDetails.HealthcareDescription", "")
			.formParam("FormattedTbServicePresentationDate.Day", "02")
			.formParam("FormattedTbServicePresentationDate.Month", "05")
			.formParam("FormattedTbServicePresentationDate.Year", "2021")
			.formParam("FormattedDiagnosisDate.Day", "05")
			.formParam("FormattedDiagnosisDate.Month", "05")
			.formParam("FormattedDiagnosisDate.Year", "2021")
			.formParam("FormattedTreatmentDate.Day", "")
			.formParam("FormattedTreatmentDate.Month", "")
			.formParam("FormattedTreatmentDate.Year", "")
			.formParam("ClinicalDetails.DidNotStartTreatment", "true")
			.formParam("FormattedHomeVisitDate.Day", "")
			.formParam("FormattedHomeVisitDate.Month", "")
			.formParam("FormattedHomeVisitDate.Year", "")
			.formParam("ClinicalDetails.HomeVisitCarriedOut", "No")
			.formParam("ClinicalDetails.IsPostMortem", "false")
			.formParam("ClinicalDetails.IsDotOffered", "Yes")
			.formParam("ClinicalDetails.DotStatus", "DotReceived")
			.formParam("ClinicalDetails.EnhancedCaseManagementStatus", "No")
			.formParam("ClinicalDetails.TreatmentRegimen", "StandardTherapy")
			.formParam("FormattedMdrTreatmentDate.Day", "")
			.formParam("FormattedMdrTreatmentDate.Month", "")
			.formParam("FormattedMdrTreatmentDate.Year", "")
			.formParam("ClinicalDetails.TreatmentRegimenOtherDescription", "")
			.formParam("ClinicalDetails.Notes", "")
			.formParam("actionName", "Save")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}"))
		.pause(2)

	val editTestResults = exec(http("edit_test_results_page")
			.get("/Notifications/${notificationId}/Edit/TestResults")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_56")
			.post("/Notifications/${notificationId}/Edit/TestResults/ValidateTestDataProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"true","shouldValidateFull":false,"key":"HasTestCarriedOut","HasTestCarriedOut":"true"}""")))
		.pause(1)
		.exec(http("request_57")
			.post("/Notifications/${notificationId}/Edit/TestResults?isBeingSubmitted=False")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("TestData.NotificationId", "${notificationId}")
			.formParam("TestData.HasTestCarriedOut", "true")
			.formParam("actionName", "Create")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}"))
		.pause(2)

	val addNewTestResult = exec(http("add_test_result_page")
			.get("/Notifications/${notificationId}/Edit/ManualTestResult/New")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_63")
			.post("/Notifications/${notificationId}/Edit/ManualTestResult/New/ValidateTestResultForEditDate")
			.headers(validate_headers)
			.body(StringBody("""{"day":"05","month":"05","year":"2021","key":"TestDate"}""")))
		.pause(1)
		.exec(http("request_64")
			.get("/Notifications/${notificationId}/Edit/ManualTestResult/New/FilteredSampleTypesForManualTestType?value=4")
			.headers(get_headers))
		.pause(1)
		.exec(http("request_65")
			.post("/Notifications/${notificationId}/Edit/ManualTestResult/New")
			.headers(save_headers)
			.formParam("FormattedTestDate.Day", "05")
			.formParam("FormattedTestDate.Month", "05")
			.formParam("FormattedTestDate.Year", "2021")
			.formParam("TestResultForEdit.ManualTestTypeId", "4")
			.formParam("TestResultForEdit.SampleTypeId", "")
			.formParam("TestResultForEdit.Result", "ConsistentWithTbOther")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}"))
		.pause(2)

	val editContactTracing = exec(http("edit_contact_tracing_page")
			.get("/Notifications/${notificationId}/Edit/ContactTracing")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
				.exec(http("request_75")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":null,"adultsScreened":null,"childrenScreened":null,"adultsLatentTb":null,"childrenLatentTb":null,"adultsActiveTb":null,"childrenActiveTb":null,"adultsStartedTreatment":null,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}""")))
		.pause(1)
		.exec(http("request_76")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":null,"childrenScreened":null,"adultsLatentTb":null,"childrenLatentTb":null,"adultsActiveTb":null,"childrenActiveTb":null,"adultsStartedTreatment":null,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}""")))
		.pause(1)
		.exec(http("request_77")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":null,"adultsLatentTb":null,"childrenLatentTb":null,"adultsActiveTb":null,"childrenActiveTb":null,"adultsStartedTreatment":null,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}"""))
			.resources(http("request_78")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":null,"childrenLatentTb":null,"adultsActiveTb":null,"childrenActiveTb":null,"adultsStartedTreatment":null,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}"""))))
		.pause(1)
		.exec(http("request_79")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":null,"childrenLatentTb":null,"adultsActiveTb":0,"childrenActiveTb":null,"adultsStartedTreatment":null,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}""")))
		.pause(1)
		.exec(http("request_80")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":null,"childrenLatentTb":null,"adultsActiveTb":0,"childrenActiveTb":0,"adultsStartedTreatment":null,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}""")))
		.pause(1)
		.exec(http("request_81")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":0,"childrenLatentTb":null,"adultsActiveTb":0,"childrenActiveTb":0,"adultsStartedTreatment":null,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}"""))
			.resources(http("request_82")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":0,"childrenLatentTb":0,"adultsActiveTb":0,"childrenActiveTb":0,"adultsStartedTreatment":null,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}""")),
            http("request_83")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":0,"childrenLatentTb":0,"adultsActiveTb":0,"childrenActiveTb":0,"adultsStartedTreatment":0,"childrenStartedTreatment":null,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}""")),
            http("request_84")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":0,"childrenLatentTb":0,"adultsActiveTb":0,"childrenActiveTb":0,"adultsStartedTreatment":0,"childrenStartedTreatment":0,"adultsFinishedTreatment":null,"childrenFinishedTreatment":null}""")),
            http("request_85")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":0,"childrenLatentTb":0,"adultsActiveTb":0,"childrenActiveTb":0,"adultsStartedTreatment":0,"childrenStartedTreatment":0,"adultsFinishedTreatment":0,"childrenFinishedTreatment":null}"""))))
		.pause(2)
		.exec(http("request_86")
			.post("/Notifications/${notificationId}/Edit/ContactTracing/ValidateContactTracing")
			.headers(validate_headers)
			.body(StringBody("""{"adultsIdentified":4,"childrenIdentified":1,"adultsScreened":0,"childrenScreened":0,"adultsLatentTb":0,"childrenLatentTb":0,"adultsActiveTb":0,"childrenActiveTb":0,"adultsStartedTreatment":0,"childrenStartedTreatment":0,"adultsFinishedTreatment":0,"childrenFinishedTreatment":0}"""))
			.resources(http("request_87")
			.post("/Notifications/${notificationId}/Edit/ContactTracing")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("ContactTracing.AdultsIdentified", "4")
			.formParam("ContactTracing.ChildrenIdentified", "1")
			.formParam("ContactTracing.AdultsScreened", "0")
			.formParam("ContactTracing.ChildrenScreened", "0")
			.formParam("ContactTracing.AdultsActiveTB", "0")
			.formParam("ContactTracing.ChildrenActiveTB", "0")
			.formParam("ContactTracing.AdultsLatentTB", "0")
			.formParam("ContactTracing.ChildrenLatentTB", "0")
			.formParam("ContactTracing.AdultsStartedTreatment", "0")
			.formParam("ContactTracing.ChildrenStartedTreatment", "0")
			.formParam("ContactTracing.AdultsFinishedTreatment", "0")
			.formParam("ContactTracing.ChildrenFinishedTreatment", "0")
			.formParam("actionName", "Save")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}")))
		.pause(2)

	val editSocialRiskFactors = exec(http("edit_social_risk_factors_page")
			.get("/Notifications/${notificationId}/Edit/SocialRiskFactors")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_92")
			.post("/Notifications/${notificationId}/Edit/SocialRiskFactors?isBeingSubmitted=False")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("SocialRiskFactors.AlcoholMisuseStatus", "No")
			.formParam("SocialRiskFactors.RiskFactorDrugs.IsCurrentView", "false")
			.formParam("SocialRiskFactors.RiskFactorDrugs.InPastFiveYearsView", "false")
			.formParam("SocialRiskFactors.RiskFactorDrugs.MoreThanFiveYearsAgoView", "false")
			.formParam("SocialRiskFactors.RiskFactorDrugs.Status", "No")
			.formParam("SocialRiskFactors.RiskFactorHomelessness.IsCurrentView", "false")
			.formParam("SocialRiskFactors.RiskFactorHomelessness.InPastFiveYearsView", "false")
			.formParam("SocialRiskFactors.RiskFactorHomelessness.MoreThanFiveYearsAgoView", "false")
			.formParam("SocialRiskFactors.RiskFactorHomelessness.Status", "No")
			.formParam("SocialRiskFactors.RiskFactorImprisonment.Status", "Yes")
			.formParam("SocialRiskFactors.RiskFactorImprisonment.IsCurrentView", "false")
			.formParam("SocialRiskFactors.RiskFactorImprisonment.InPastFiveYearsView", "false")
			.formParam("SocialRiskFactors.RiskFactorImprisonment.MoreThanFiveYearsAgoView", "true")
			.formParam("SocialRiskFactors.RiskFactorImprisonment.MoreThanFiveYearsAgoView", "false")
			.formParam("SocialRiskFactors.MentalHealthStatus", "No")
			.formParam("SocialRiskFactors.RiskFactorSmoking.Status", "Yes")
			.formParam("SocialRiskFactors.RiskFactorSmoking.IsCurrentView", "false")
			.formParam("SocialRiskFactors.RiskFactorSmoking.InPastFiveYearsView", "true")
			.formParam("SocialRiskFactors.RiskFactorSmoking.InPastFiveYearsView", "false")
			.formParam("SocialRiskFactors.RiskFactorSmoking.MoreThanFiveYearsAgoView", "false")
			.formParam("SocialRiskFactors.AsylumSeekerStatus", "No")
			.formParam("SocialRiskFactors.ImmigrationDetaineeStatus", "No")
			.formParam("actionName", "Save")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}"))
		.pause(2)

	val editTravel = exec(http("edit_travel_page")
			.get("/Notifications/${notificationId}/Edit/Travel")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_97")
			.post("/Notifications/${notificationId}/Edit/Travel/Validatetravel")
			.headers(validate_headers)
			.body(StringBody("""{"totalNumberOfCountries":null,"country1Id":null,"country2Id":null,"country3Id":null,"stayLengthInMonths1":null,"stayLengthInMonths2":null,"stayLengthInMonths3":null,"shouldValidateFull":false,"hasTravel":"No"}"""))
			.resources(http("request_98")
			.post("/Notifications/${notificationId}/Edit/Travel/Validatevisitor")
			.headers(validate_headers)
			.body(StringBody("""{"totalNumberOfCountries":null,"country1Id":null,"country2Id":null,"country3Id":null,"stayLengthInMonths1":null,"stayLengthInMonths2":null,"stayLengthInMonths3":null,"shouldValidateFull":false,"hasVisitor":"No"}"""))))
		.pause(1)
		.exec(http("request_99")
			.post("/Notifications/${notificationId}/Edit/Travel?isBeingSubmitted=False")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("TravelDetails.TotalNumberOfCountries", "")
			.formParam("TravelDetails.Country1Id", "")
			.formParam("TravelDetails.StayLengthInMonths1", "")
			.formParam("TravelDetails.Country2Id", "")
			.formParam("TravelDetails.StayLengthInMonths2", "")
			.formParam("TravelDetails.Country3Id", "")
			.formParam("TravelDetails.StayLengthInMonths3", "")
			.formParam("TravelDetails.HasTravel", "No")
			.formParam("VisitorDetails.TotalNumberOfCountries", "")
			.formParam("VisitorDetails.Country1Id", "")
			.formParam("VisitorDetails.StayLengthInMonths1", "")
			.formParam("VisitorDetails.Country2Id", "")
			.formParam("VisitorDetails.StayLengthInMonths2", "")
			.formParam("VisitorDetails.Country3Id", "")
			.formParam("VisitorDetails.StayLengthInMonths3", "")
			.formParam("VisitorDetails.HasVisitor", "No")
			.formParam("actionName", "Save")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}"))
		.pause(2)

	val editComorbidities = exec(http("edit_comorbidities_page")
			.get("/Notifications/${notificationId}/Edit/Comorbidities")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_104")
			.post("/Notifications/${notificationId}/Edit/Comorbidities/ValidateImmunosuppression")
			.headers(validate_headers)
			.body(StringBody("""{"status":"No","hasBioTherapy":false,"hasTransplantation":false,"hasOther":false,"otherDescription":""}"""))
			.resources(http("request_105")
			.post("/Notifications/${notificationId}/Edit/Comorbidities?isBeingSubmitted=False")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("ComorbidityDetails.DiabetesStatus", "No")
			.formParam("ComorbidityDetails.HepatitisBStatus", "No")
			.formParam("ComorbidityDetails.HepatitisCStatus", "No")
			.formParam("ComorbidityDetails.LiverDiseaseStatus", "No")
			.formParam("ComorbidityDetails.RenalDiseaseStatus", "No")
			.formParam("HasBioTherapy", "false")
			.formParam("HasTransplantation", "false")
			.formParam("HasOther", "false")
			.formParam("OtherDescription", "")
			.formParam("ImmunosuppressionStatus", "No")
			.formParam("actionName", "Save")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}")))
		.pause(2)

	val editSocialContextAddresses = exec(http("edit_social_context_addresses_page")
			.get("/Notifications/${notificationId}/Edit/SocialContextAddresses")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_110")
			.post("/Notifications/${notificationId}/Edit/SocialContextAddresses?isBeingSubmitted=False")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("NotificationId", "${notificationId}")
			.formParam("actionName", "Create")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}"))
		.pause(2)

	val addSocialContextAddress = exec(http("add_social_context_address_page")
			.get("/Notifications/${notificationId}/Edit/SocialContextAddresses/New")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_115")
			.post("/Notifications/${notificationId}/Edit/SocialContextAddress/New/ValidateSocialContextProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"124 Fake Street","shouldValidateFull":false,"key":"Address","Address":"124 Fake Street"}""")))
		.pause(1)
		.exec(http("request_116")
			.post("/Notifications/${notificationId}/Edit/SocialContextAddress/New/ValidateSocialContextProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"BS1 1PN","shouldValidateFull":false,"key":"Postcode","Postcode":"BS1 1PN"}""")))
		.pause(1)
		.exec(http("request_117")
			.post("/Notifications/${notificationId}/Edit/SocialContextAddress/New/ValidateSocialContextDate")
			.headers(validate_headers)
			.body(StringBody("""{"day":"01","month":"01","year":"2015","key":"DateFrom"}""")))
		.pause(1)
		.exec(http("request_118")
			.post("/Notifications/${notificationId}/Edit/SocialContextAddress/New")
			.headers(save_headers)
			.formParam("Address.Address", "124 Fake Street")
			.formParam("Address.Postcode", "BS1 1PN")
			.formParam("FormattedDateFrom.Day", "01")
			.formParam("FormattedDateFrom.Month", "01")
			.formParam("FormattedDateFrom.Year", "2015")
			.formParam("FormattedDateTo.Day", "31")
			.formParam("FormattedDateTo.Month", "12")
			.formParam("FormattedDateTo.Year", "2020")
			.formParam("Address.Details", "")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}")
			.resources(http("request_119")
			.get("/Notifications/${notificationId}/Edit/SocialContextAddress/New/ValidateSocialContextDates?keyValuePairs%5B0%5D%5Bkey%5D=DateFrom&keyValuePairs%5B0%5D%5Bday%5D=01&keyValuePairs%5B0%5D%5Bmonth%5D=01&keyValuePairs%5B0%5D%5Byear%5D=2015&keyValuePairs%5B1%5D%5Bkey%5D=DateTo&keyValuePairs%5B1%5D%5Bday%5D=31&keyValuePairs%5B1%5D%5Bmonth%5D=12&keyValuePairs%5B1%5D%5Byear%5D=2020")
			.headers(validate_headers),
            http("request_120")
			.get("/Notifications/${notificationId}/Edit/SocialContextAddresses?isBeingSubmitted=False")
			.headers(get_headers)))
		.pause(2)

	val editTreatmentEvents = exec(http("edit_treatment_events_page")
			.get("/Notifications/${notificationId}/Edit/TreatmentEvents")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_130")
			.post("/Notifications/${notificationId}/Edit/TreatmentEvents")
			.headers(save_headers)
			.formParam("NotificationId", "${notificationId}")
			.formParam("actionName", "Create")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}")
			.resources(http("request_135")
			.get("/Notifications/${notificationId}/Edit/TreatmentEvent/New/FilteredOutcomeSubTypesForType?value=")
			.headers(get_headers)))
		.pause(2)

	val addTreatmentEvent = exec(http("add_treatment_event_page")
			.get("/Notifications/${notificationId}/Edit/TreatmentEvents")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_136")
			.post("/Notifications/${notificationId}/Edit/TreatmentEvent/New/ValidateTreatmentEventDate")
			.headers(validate_headers)
			.body(StringBody("""{"day":"05","month":"05","year":"2021","key":"EventDate"}"""))
			.resources(http("request_137")
			.post("/Notifications/${notificationId}/Edit/TreatmentEvent/New/ValidateTreatmentEventProperty")
			.headers(validate_headers)
			.body(StringBody("""{"value":"0","shouldValidateFull":false,"key":"TreatmentEventType","TreatmentEventType":"0"}"""))))
		.pause(1)
		.exec(http("request_118")
			.post("/Notifications/${notificationId}/Edit/TreatmentEvent/New")
			.headers(save_headers)
			.formParam("TreatmentEvent.TreatmentOutcomeId", "")
			.formParam("TreatmentEvent.CaseManagerId", "")
			.formParam("TreatmentEvent.TbServiceCode", "")
			.formParam("FormattedEventDate.Day", "05")
			.formParam("FormattedEventDate.Month", "05")
			.formParam("FormattedEventDate.Year", "2021")
			.formParam("TreatmentEvent.TreatmentEventType", "1")
			.formParam("SelectedTreatmentOutcomeType", "6")
			.formParam("SelectedTreatmentOutcomeSubType", "11")
			.formParam("TreatmentEvent.Note", "")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}"))
		.pause(2)

	val subitDraftNotification = exec(http("edit_treatment_events_page")
			.get("/Notifications/${notificationId}/Edit/TreatmentEvents")
			.headers(get_headers)
			.check(
				css("""input[name="__RequestVerificationToken"]""", "value").saveAs("requestVerificationToken"),
				status.is(200)))
		.pause(1)
		.exec(http("request_143")
			.post("/Notifications/${notificationId}/Edit/TreatmentEvents")
			.headers(save_headers)
			.formParam("actionName", "Submit")
			.formParam("NotificationId", "${notificationId}")
			.formParam("__RequestVerificationToken", "${requestVerificationToken}"))

	val createFullScenario = scenario("Create")
		.exec(
			search,
			createNotificationWithPatientDetails,
			editHospitalDetails,
			editClinicalDetails,
			editTestResults,
			addNewTestResult,
			editContactTracing,
			editSocialRiskFactors,
			editTravel,
			editComorbidities,
			editSocialContextAddresses,
			addSocialContextAddress,
			editTreatmentEvents,
			addTreatmentEvent,
			subitDraftNotification)

	setUp(createFullScenario.inject(atOnceUsers(1))).protocols(httpProtocol)
}